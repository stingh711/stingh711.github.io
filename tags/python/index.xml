<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on LiHong&#39;s Note</title>
    <link>https://stingh711.github.io/tags/python/</link>
    <description>Recent content in Python on LiHong&#39;s Note</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 11 Oct 2024 15:14:10 +0800</lastBuildDate>
    <atom:link href="https://stingh711.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vscode python check wrong method parameters</title>
      <link>https://stingh711.github.io/posts/vscode-python-check-wrong-method-parameters/</link>
      <pubDate>Fri, 11 Oct 2024 15:14:10 +0800</pubDate>
      <guid>https://stingh711.github.io/posts/vscode-python-check-wrong-method-parameters/</guid>
      <description>Recently I switched from pycharm to cursor which is vscode based. However, I found it cannot find errors if I pass wrong parameters to a method.&#xA;For example, I have a method like this:&#xA;def add(a, b): return a + b And then I call this method like this:&#xA;add(1) In pycharm, it will warn me that there is an unexpected argument. However, in cursor, it won&amp;rsquo;t. After some research, I found the setting python.</description>
    </item>
    <item>
      <title>How to use python in ultisnips</title>
      <link>https://stingh711.github.io/posts/python_ultisnips/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/python_ultisnips/</guid>
      <description>This snippet uses python to convert camel case to underline. It is an example to use python in ultisnips. t[1] gets content of $1. After the convert, assign the result to snip.rv.&#xA;snippet gfk &amp;#34;gorm foreign key&amp;#34; $1ID uint \`gorm:&amp;#34;column:`!p name=re.sub(r&amp;#34;(\w)([A-Z])&amp;#34;, r&amp;#34;\1_\2&amp;#34;, t[1]).lower(); snip.rv = name`_id&amp;#34; json:&amp;#34;-&amp;#34;\` ${1:Model} $1 \`gorm:&amp;#34;foreignKey:$1ID&amp;#34; json:&amp;#34;`!p name=re.sub(r&amp;#34;(\w)([A-Z])&amp;#34;, r&amp;#34;\1_\2&amp;#34;, t[1]).lower(); snip.rv = name`&amp;#34;\` endsnippet </description>
    </item>
    <item>
      <title>Django-auto-prefetching</title>
      <link>https://stingh711.github.io/posts/django_auto_prefetching/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/django_auto_prefetching/</guid>
      <description>Django-auto-prefetching is a small django package to do the select_related and prefetch_related automatically.&#xA;Usage The usage is very simple, just import the AutoPrefetchViewSetMixin from django_auto_prefetching, and then add the mixin as the base class of a ListAPIView&#xA;If you override the get_queryset of the ListAPIView, need some work to make it work.&#xA;import django_auto_prefetching from rest_framework.viewsets import ModelViewSet class BaseModelViewSet(django_auto_prefetching.AutoPrefetchViewSetMixin, ModelViewSet): serializer_class = YourModelSerializer def get_queryset(self): # Simply do the extra select_related / prefetch_related here # and leave the mixin to do the rest of the work queryset = YourModel.</description>
    </item>
    <item>
      <title>Use django-filter to add filter for REST api</title>
      <link>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</guid>
      <description>For a REST list api, filtering and sorting is the basic requirements. Using django-filter, we can add these functions with only a few lines of codes.&#xA;For example, if we have a model as follows,&#xA;class Product(models.Model): name = models.CharField(max_length=100) created_at = models.DatetimeField() We will write relative serializer and view.&#xA;class ProductSerializer(serializers.ModelSerializer): class Meta: fields = &amp;#39;__all__&amp;#39; class ProductListView(generics.ListView): queryset = Product.objects.all() serializer_class = ProductSerializer If we don&amp;rsquo;t use django-filter, we can override ProductListview&amp;rsquo;s get_queryset to implement filter.</description>
    </item>
    <item>
      <title>Write a CustomPaginator for django rest framework</title>
      <link>https://stingh711.github.io/posts/custom-paginator-for-drf/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/custom-paginator-for-drf/</guid>
      <description>Pagination is essential part for a REST api. Django rest framework provides an easy to way to add pagination to current API and a lot of useful built-in implementations. However, in order to work with a specified frontend component, a customized version is needed.&#xA;Customizing is easy in DRF, just extends a current one and override it get_paginated_response method. For example, the following one uses the page number pagination ,which means you can pass page=n in the URL to get the nth page.</description>
    </item>
    <item>
      <title>Pandas in jupyter</title>
      <link>https://stingh711.github.io/posts/pandas-in-jupyter/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/pandas-in-jupyter/</guid>
      <description>Read data from mysql and draw a chart.&#xA;%matplotlib inline import pymysql import pandas as pd import pandas.io.sql as sql conn = pymysql.connect(host=&amp;#39;192.168.56.1&amp;#39;, user=&amp;#39;root&amp;#39;, passwd=&amp;#39;qwer-1235&amp;#39;, db=&amp;#39;pdss&amp;#39;) s = &amp;#39;select number_value from quality_data_item_record where item_id = 11&amp;#39; df = sql.read_sql_query(s, conn) df.plot() </description>
    </item>
  </channel>
</rss>
