<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sting&#39;s Note</title>
    <link>https://stingh711.github.io/posts/</link>
    <description>Recent content in Posts on Sting&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 26 Jun 2018 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://stingh711.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vscode&#39;s restclient is great</title>
      <link>https://stingh711.github.io/posts/vscode-restclient-is-great/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/vscode-restclient-is-great/</guid>
      <description>Postman is an essential tool for the development of both frontend and backend. However, sometimes I hate its save function. I hate to find a right folder to save a request. What I need is just a very simple tool to test some API and it will be just there when I need it. Then I found REST Client extension for Vscode.
With this extension, you can save your request in plain text.</description>
    </item>
    
    <item>
      <title>Use django-filter to add filter for REST api</title>
      <link>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</guid>
      <description>For a REST list api, filtering and sorting is the basic requirements. Using django-filter, we can add these functions with only a few lines of codes.
For example, if we have a model as follows,
class Product(models.Model): name = models.CharField(max_length=100) created_at = models.DatetimeField()  We will write relative serializer and view.
class ProductSerializer(serializers.ModelSerializer): class Meta: fields = &#39;__all__&#39; class ProductListView(generics.ListView): queryset = Product.objects.all() serializer_class = ProductSerializer  If we don&amp;rsquo;t use django-filter, we can override ProductListview&amp;rsquo;s get_queryset to implement filter.</description>
    </item>
    
    <item>
      <title>Use org-journal to keep my daily notes</title>
      <link>https://stingh711.github.io/posts/use-org-journal/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/use-org-journal/</guid>
      <description>org-journal is small package to write your journal in org mode. Like diary mode, it will generate one file per day, but you can use org-mode instead of plain dairy mode.
To create a journal, just press C-c c-j, an org-mode item will be created with curren time.
It is also provided calendar binding, so you can view your journal from calendar view.
Update: to search your notes, the best way is to add your notes to a git repository, then open one entry and use M-x counsel-rg.</description>
    </item>
    
    <item>
      <title>Write a CustomPaginator for django rest framework</title>
      <link>https://stingh711.github.io/posts/custom-paginator-for-drf/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/custom-paginator-for-drf/</guid>
      <description>Pagination is essential part for a REST api. Django rest framework provides an easy to way to add pagination to current API and a lot of useful built-in implementations. However, in order to work with a specified frontend component, a customized version is needed.
Customizing is easy in DRF, just extends a current one and override it get_paginated_response method. For example, the following one uses the page number pagination ,which means you can pass page=n in the URL to get the nth page.</description>
    </item>
    
    <item>
      <title>How to remove vscode&#39;s decorator warning?</title>
      <link>https://stingh711.github.io/posts/how-to-remove-vscode-decorator-warning/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/how-to-remove-vscode-decorator-warning/</guid>
      <description> Create a tsconfig.json under root directory. Add following code to tsconfig.json  { &amp;quot;compilerOptions&amp;quot;: { &amp;quot;experimentalDecorators&amp;quot;: true, &amp;quot;allowJs&amp;quot;: true } }   Restart vscode  </description>
    </item>
    
    <item>
      <title>Pandas in jupyter</title>
      <link>https://stingh711.github.io/posts/pandas-in-jupyter/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/pandas-in-jupyter/</guid>
      <description>Read data from mysql and draw a chart.
%matplotlib inline import pymysql import pandas as pd import pandas.io.sql as sql conn = pymysql.connect(host=&#39;192.168.56.1&#39;, user=&#39;root&#39;, passwd=&#39;qwer-1235&#39;, db=&#39;pdss&#39;) s = &#39;select number_value from quality_data_item_record where item_id = 11&#39; df = sql.read_sql_query(s, conn) df.plot()  </description>
    </item>
    
    <item>
      <title>Javascript notes</title>
      <link>https://stingh711.github.io/posts/javascript-notes/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/javascript-notes/</guid>
      <description>Just some notes on some popular javascript libraries.
bootstrap-daterangepicker How to get startDate and endDate var range = $(&amp;quot;#range&amp;quot;).daterangepicker(); var start = range.data(&amp;quot;daterangepicker&amp;quot;).startDate; var end = range.data(&amp;quot;daterangepicker&amp;quot;).endDate;  lodash map var data = [{label: &#39;4/1&#39;, value: 10}, {label: &#39;4/2&#39;, value: 14}]; var labels = _.map(data, function(item) { return item.label; }); var values = _.map(data, function(item) { return item.value; });  It is especially useful when preparing data for some chart libraries.</description>
    </item>
    
    <item>
      <title>Notes about postgresql</title>
      <link>https://stingh711.github.io/posts/notes-about-postgresql/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/notes-about-postgresql/</guid>
      <description> How to generate and insert test data? For example, my table is like: create table (time timestamp, value double precision, sensor integer). If I want to insert some test data, I can use function generate_series. Following sql will insert 5000 rows:
insert into test (time, sensor, value) select now(), i, random() from generate_series(1, 5000) s(i)  How to view disk usage? View table size select pg_size_pretty(pg_relation_size(&#39;pressure_01&#39;))  View database size select pg_size_pretty(pg_database_size(&#39;pressure_01&#39;))  </description>
    </item>
    
    <item>
      <title>Dynamic forms with springmvc and thymeleaf</title>
      <link>https://stingh711.github.io/posts/dynamic-form-with-springmvc-and-thymeleaf/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0800</pubDate>
      
      <guid>https://stingh711.github.io/posts/dynamic-form-with-springmvc-and-thymeleaf/</guid>
      <description>Requirements SubjectGroup and SubjectGroupOption has one-to-many relationship. When adding a subject group, subject group options can be added inline.
Things I’ve learned.  When adding an option, don’t need to use javascript to handle the added html snippet. Just submit the add request to controller and handle the adding in the controller (Add a new options into the option list of subject group), then return to the add page. Spring mvc’s data binding and thyme leaf’s for loop will handle the html.</description>
    </item>
    
  </channel>
</rss>