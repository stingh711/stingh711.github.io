<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiHong&#39;s Note</title>
    <link>https://stingh711.github.io/</link>
    <description>Recent content on LiHong&#39;s Note</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 04 Dec 2024 10:25:00 +0800</lastBuildDate>
    <atom:link href="https://stingh711.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Switching From Evil to Meow</title>
      <link>https://stingh711.github.io/posts/switching-from-evil-to-meow/</link>
      <pubDate>Wed, 04 Dec 2024 10:25:00 +0800</pubDate>
      <guid>https://stingh711.github.io/posts/switching-from-evil-to-meow/</guid>
      <description>Recently I switched from evil model to meow.&#xA;Evil mode is powerful but slow. It conflits with the keybindings of some customized modes, like howm or zk&amp;rsquo;s index mode.&#xA;Second, it is difficult to customize for my poor knowledge of elisp.&#xA;Last, I only use emacs for note taking, and I don&amp;rsquo;t need the power of evil mode. I don&amp;rsquo;t do complex editing, so meow is a good choice.&#xA;After read meow-tutor several times and do some customization of key mappings, I am quite happy with meow.</description>
    </item>
    <item>
      <title>Vscode python check wrong method parameters</title>
      <link>https://stingh711.github.io/posts/vscode-python-check-wrong-method-parameters/</link>
      <pubDate>Fri, 11 Oct 2024 15:14:10 +0800</pubDate>
      <guid>https://stingh711.github.io/posts/vscode-python-check-wrong-method-parameters/</guid>
      <description>Recently I switched from pycharm to cursor which is vscode based. However, I found it cannot find errors if I pass wrong parameters to a method.&#xA;For example, I have a method like this:&#xA;def add(a, b): return a + b And then I call this method like this:&#xA;add(1) In pycharm, it will warn me that there is an unexpected argument. However, in cursor, it won&amp;rsquo;t. After some research, I found the setting python.</description>
    </item>
    <item>
      <title>Silverbullet.md</title>
      <link>https://stingh711.github.io/posts/silver_bullet_md/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/silver_bullet_md/</guid>
      <description>Today I found another note-taking application named silverbullet. It is a simple tool but with essential features.&#xA;It has only one panel, the note edit panel. (After install back link plugin, you will get a left panel to display back links) Just like a wiki, you can add new pages with [[]]. Or you can use command cmd+k to find pages by name or create a new page if the page does&amp;rsquo;t exist.</description>
    </item>
    <item>
      <title>Obsidian is the best note app</title>
      <link>https://stingh711.github.io/posts/obsidian/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/obsidian/</guid>
      <description>I&amp;rsquo;ve tried a lot of note-taking applications, especially the so-called zettelkasten ones. From emacs&amp;rsquo; org-roam, to tiddlywiki, to Bear, to VS Code based denron, and logseq, noteplan and craft on the mac platform, and the equally famous logseq, I&amp;rsquo;ve tried each one a little.&#xA;UI-wise, Bear is my favorite, nothing fancy, powerful tag system, simple and easy to use. But the Bear team seems to have spent a lot of time on rewriting the editor, which doesn&amp;rsquo;t make any sense to most users.</description>
    </item>
    <item>
      <title>How to format Date to JSON in golang</title>
      <link>https://stingh711.github.io/posts/format_date_to_json_golang/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/format_date_to_json_golang/</guid>
      <description>I have a gorm model and it has a Date field. But golang doesn’t have a “pure” date struct, so we use time.Time.&#xA;type OperationPlanningResult struct { ID uint PlannedStartedAt time.Time `json:&amp;#34;planned_started_at&amp;#34;` } When I marshal it to JSON, this field is like “2006-01-02T00:00:00Z08” and I need to parse it again in frontend.&#xA;One way to do it is writing a custom type and providing a custom MarshalJSON function. But I need to write the relative method for gorm because I’m using gorm.</description>
    </item>
    <item>
      <title>How to use python in ultisnips</title>
      <link>https://stingh711.github.io/posts/python_ultisnips/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/python_ultisnips/</guid>
      <description>This snippet uses python to convert camel case to underline. It is an example to use python in ultisnips. t[1] gets content of $1. After the convert, assign the result to snip.rv.&#xA;snippet gfk &amp;#34;gorm foreign key&amp;#34; $1ID uint \`gorm:&amp;#34;column:`!p name=re.sub(r&amp;#34;(\w)([A-Z])&amp;#34;, r&amp;#34;\1_\2&amp;#34;, t[1]).lower(); snip.rv = name`_id&amp;#34; json:&amp;#34;-&amp;#34;\` ${1:Model} $1 \`gorm:&amp;#34;foreignKey:$1ID&amp;#34; json:&amp;#34;`!p name=re.sub(r&amp;#34;(\w)([A-Z])&amp;#34;, r&amp;#34;\1_\2&amp;#34;, t[1]).lower(); snip.rv = name`&amp;#34;\` endsnippet </description>
    </item>
    <item>
      <title>Django-auto-prefetching</title>
      <link>https://stingh711.github.io/posts/django_auto_prefetching/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/django_auto_prefetching/</guid>
      <description>Django-auto-prefetching is a small django package to do the select_related and prefetch_related automatically.&#xA;Usage The usage is very simple, just import the AutoPrefetchViewSetMixin from django_auto_prefetching, and then add the mixin as the base class of a ListAPIView&#xA;If you override the get_queryset of the ListAPIView, need some work to make it work.&#xA;import django_auto_prefetching from rest_framework.viewsets import ModelViewSet class BaseModelViewSet(django_auto_prefetching.AutoPrefetchViewSetMixin, ModelViewSet): serializer_class = YourModelSerializer def get_queryset(self): # Simply do the extra select_related / prefetch_related here # and leave the mixin to do the rest of the work queryset = YourModel.</description>
    </item>
    <item>
      <title>Vim-projectionist</title>
      <link>https://stingh711.github.io/posts/vim_projectionist/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/vim_projectionist/</guid>
      <description>When working on django projects, I need to switching among django’s model, view, url, admin and serializers files. I used to use fzf.vim to jump around until I found vim-projectionist.&#xA;With this plugin, you can create a “map” of your source code, with this map, you can just from for example, .c file to .h file.&#xA;Create a .projections.json under your django file as follows:&#xA;{ &amp;#34;*/urls.py&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;urls&amp;#34;, &amp;#34;alternate&amp;#34;: &amp;#34;{}/views.</description>
    </item>
    <item>
      <title>Vscode&#39;s restclient is great</title>
      <link>https://stingh711.github.io/posts/vscode-restclient-is-great/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/vscode-restclient-is-great/</guid>
      <description>Postman is an essential tool for the development of both frontend and backend. However, sometimes I hate its save function. I hate to find a right folder to save a request. What I need is just a very simple tool to test some API and it will be just there when I need it. Then I found REST Client extension for Vscode.&#xA;With this extension, you can save your request in plain text.</description>
    </item>
    <item>
      <title>Use django-filter to add filter for REST api</title>
      <link>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/use-django-filter-to-add-filter-for-rest-api/</guid>
      <description>For a REST list api, filtering and sorting is the basic requirements. Using django-filter, we can add these functions with only a few lines of codes.&#xA;For example, if we have a model as follows,&#xA;class Product(models.Model): name = models.CharField(max_length=100) created_at = models.DatetimeField() We will write relative serializer and view.&#xA;class ProductSerializer(serializers.ModelSerializer): class Meta: fields = &amp;#39;__all__&amp;#39; class ProductListView(generics.ListView): queryset = Product.objects.all() serializer_class = ProductSerializer If we don&amp;rsquo;t use django-filter, we can override ProductListview&amp;rsquo;s get_queryset to implement filter.</description>
    </item>
    <item>
      <title>Use org-journal to keep my daily notes</title>
      <link>https://stingh711.github.io/posts/use-org-journal/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/use-org-journal/</guid>
      <description>org-journal is small package to write your journal in org mode. Like diary mode, it will generate one file per day, but you can use org-mode instead of plain dairy mode.&#xA;To create a journal, just press C-c c-j, an org-mode item will be created with curren time.&#xA;It is also provided calendar binding, so you can view your journal from calendar view.</description>
    </item>
    <item>
      <title>Write a CustomPaginator for django rest framework</title>
      <link>https://stingh711.github.io/posts/custom-paginator-for-drf/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/custom-paginator-for-drf/</guid>
      <description>Pagination is essential part for a REST api. Django rest framework provides an easy to way to add pagination to current API and a lot of useful built-in implementations. However, in order to work with a specified frontend component, a customized version is needed.&#xA;Customizing is easy in DRF, just extends a current one and override it get_paginated_response method. For example, the following one uses the page number pagination ,which means you can pass page=n in the URL to get the nth page.</description>
    </item>
    <item>
      <title>How to remove vscode&#39;s decorator warning?</title>
      <link>https://stingh711.github.io/posts/how-to-remove-vscode-decorator-warning/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/how-to-remove-vscode-decorator-warning/</guid>
      <description> Create a tsconfig.json under root directory. Add following code to tsconfig.json { &amp;#34;compilerOptions&amp;#34;: { &amp;#34;experimentalDecorators&amp;#34;: true, &amp;#34;allowJs&amp;#34;: true } } Restart vscode </description>
    </item>
    <item>
      <title>Pandas in jupyter</title>
      <link>https://stingh711.github.io/posts/pandas-in-jupyter/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/pandas-in-jupyter/</guid>
      <description>Read data from mysql and draw a chart.&#xA;%matplotlib inline import pymysql import pandas as pd import pandas.io.sql as sql conn = pymysql.connect(host=&amp;#39;192.168.56.1&amp;#39;, user=&amp;#39;root&amp;#39;, passwd=&amp;#39;qwer-1235&amp;#39;, db=&amp;#39;pdss&amp;#39;) s = &amp;#39;select number_value from quality_data_item_record where item_id = 11&amp;#39; df = sql.read_sql_query(s, conn) df.plot() </description>
    </item>
    <item>
      <title>Javascript notes</title>
      <link>https://stingh711.github.io/posts/javascript-notes/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/javascript-notes/</guid>
      <description>Just some notes on some popular javascript libraries.&#xA;bootstrap-daterangepicker How to get startDate and endDate var range = $(&amp;#34;#range&amp;#34;).daterangepicker(); var start = range.data(&amp;#34;daterangepicker&amp;#34;).startDate; var end = range.data(&amp;#34;daterangepicker&amp;#34;).endDate; lodash map var data = [ { label: &amp;#34;4/1&amp;#34;, value: 10 }, { label: &amp;#34;4/2&amp;#34;, value: 14 }, ]; var labels = _.map(data, function (item) { return item.label; }); var values = _.map(data, function (item) { return item.value; }); It is especially useful when preparing data for some chart libraries.</description>
    </item>
    <item>
      <title>Notes about postgresql</title>
      <link>https://stingh711.github.io/posts/notes-about-postgresql/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/notes-about-postgresql/</guid>
      <description>How to generate and insert test data? For example, my table is like: create table (time timestamp, value double precision, sensor integer). If I want to insert some test data, I can use function generate_series. Following sql will insert 5000 rows:&#xA;insert into test (time, sensor, value) select now(), i, random() from generate_series(1, 5000) s(i) How to view disk usage? View table size select pg_size_pretty(pg_relation_size(&amp;#39;pressure_01&amp;#39;)) View database size select pg_size_pretty(pg_database_size(&amp;#39;pressure_01&amp;#39;)) </description>
    </item>
    <item>
      <title>Dynamic forms with springmvc and thymeleaf</title>
      <link>https://stingh711.github.io/posts/dynamic-form-with-springmvc-and-thymeleaf/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://stingh711.github.io/posts/dynamic-form-with-springmvc-and-thymeleaf/</guid>
      <description>Requirements SubjectGroup and SubjectGroupOption has one-to-many relationship. When adding a subject group, subject group options can be added inline.&#xA;Things I’ve learned. When adding an option, don’t need to use javascript to handle the added html snippet. Just submit the add request to controller and handle the adding in the controller (Add a new options into the option list of subject group), then return to the add page. Spring mvc’s data binding and thyme leaf’s for loop will handle the html.</description>
    </item>
  </channel>
</rss>
